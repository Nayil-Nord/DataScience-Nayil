"""Конспект по главе 4: Выбору понятных имен."""

#  *Дата: 14/10/24*  
# ### Конспект по главе 4: Выбор понятных имен 
# *На основе книги: Свейгарт "Python. Чистый код для продолжающих"*  
#
# ---
#
# #### 1. **Важность выбора имен:**
# - Влияет на удобочитаемость кода.
# - Субъективный выбор программиста.
# - Нельзя автоматизировать.
#
#    **Пример:** вместо `a = 5` использовать `count_of_apples = 5`.  
#
# #### 2. **Схемы регистра имен:**
# - **Змеиный регистр (snake_case):** `user_name`, `total_sum`.  
# - **Верблюжий регистр (camelCase):** `userName`, `totalSum`.  
# - **Схема Pascal (PascalCase):** `UserName`, `TotalSum`.
#
# #### 3. **Соглашения PEP 8:**
# - **Модули:** имена должны быть короткими, в нижнем регистре.  
#   *Пример:* `utils`, `helpers`.  
# - **Классы:** пишутся в PascalCase.  
#   *Пример:* `class Customer`, `class BankAccount`.  
# - **Константы:** пишутся в верхнем змеином регистре (UPPER_SNAKE_CASE).  
#   *Пример:* `MAX_CONNECTIONS`, `PI`.  
# - **Функции, методы, переменные:** пишутся в нижнем змеином регистре (snake_case).  
#   *Пример:* `calculate_total`, `user_age`.  
# - **Первый аргумент методов классов:** всегда должен называться `self` для методов экземпляра и `cls` для методов классов.
# - **Приватные атрибуты:** начинаются с символа подчеркивания `_`.
#
# #### 4. **Длина имен:**
# - Избегать слишком коротких и слишком длинных имен.
# - Учитывать область видимости при выборе длины.
#
#    **Пример:** `x` vs `position_x` vs `horizontal_position_of_player_character`.
#
# #### 5. **Рекомендации:**
# - Не использовать сокращения и однобуквенные имена: `num` -> `number`.
# - Избегать префиксов, кроме `is_` и `has_` для булевых значений: `is_active`, `has_permission`.
# - Включать единицы измерения в имена: `weight_kg`, `distance_km`.
# - Избегать последовательных числовых суффиксов: `user1`, `user2` -> `users_list`.
# - Выбирать уникальные, легко находимые имена для удобства поиска через `Ctrl + F`: `email_address` вместо `email`.
# - Преобразовывать несколько похожих переменных в одну структуру данных:
#   * Переменные: `payment1`, `payment2`, `payment3` -> список или кортеж `payments`.
#   * Функции: `makePayment1(amount)`, `makePayment2(amount)` -> `makePayment(payment_type, amount)`.
#
# #### 6. **Чего избегать:**
# - Шуток, каламбуров и культурных отсылок: `gooseDownload()` -> `increaseDownloadSpeed()`.
# - Замены встроенных имен Python: не использовать `list`, `set`, `str` как имена переменных.
# - Слишком общих имен: вместо `data` -> `user_data`, вместо `temp` -> `temp_celsius`.
#
# #### 7. **Цель:**
# - Сделать код понятным для людей, а не для компьютеров.
# - Облегчить чтение, понимание и модификацию кода.
