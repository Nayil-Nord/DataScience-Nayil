# +
"""Конспектирование 1 главы "Введение в Data Science"и решение упражнений."""

import math

# -

#
# # **Дата: 14/10/24**
# #
# # # Тезисный конспект к 1 главе "Введение в Data Science"
# # книги "Python — это просто".
# #
# # ## Введение в Data Science
# # - **Data Science (Наука о данных)** — междисциплинарная область, включающая:
# #   - Обработку данных, анализ, программирование, статистику
# #   - и машинное обучение для получения знаний из данных.
# #   - Основные составляющие:
# #     1. **Математика и статистика** — для анализа данных.
# #     2. **Программирование** — для автоматизации и создания моделей.
# #     3. **Обработка данных** — сбор, очистка, структурирование данных.
# #     4. **Машинное обучение** — создание моделей для прогнозирования.
# #     5. **Бизнес-анализ** — применение знаний для принятия решений.
# #
# # ## Что такое алгоритм
# # - **Алгоритм** — четкая последовательность шагов для решения задачи.
# # - Алгоритмы могут быть представлены:
# #   - Текстом, псевдокодом или графически — с помощью **блок-схем**.
# # - **Блок-схема** — визуализация алгоритма с помощью специальных символов.
# #
# # ## Программирование
# # - **Программирование** — создание инструкций для компьютеров на языках
# # программирования.
# # - **Языки программирования** позволяют давать команды компьютеру.
# # - Основные характеристики хорошей программы:
# #   1. **Читаемость** — легкость понимания кода.
# #   2. **Эффективность** — минимальное использование ресурсов.
# #   3. **Безопасность** — защита от ошибок и угроз.
# #   4. **Масштабируемость** — работа с увеличением объема данных.
# #
# # ## Компиляторы и интерпретаторы
# # - **Компилятор** — программа, переводящая код в машинный язык.
# # - **Интерпретатор** — программа, выполняющая код построчно.
# # - Языки могут быть компилируемыми, интерпретируемыми или поддерживать
# # оба подхода.
# #
# # ## Data Science и будущее
# # - Data Science развивается за счет больших данных и искусственного
# # интеллекта.
# # - Специалисты используют ML и AI для улучшения бизнес-решений.
# #
# # ## Зачем изучать программирование
# # - **Программирование** помогает автоматизировать задачи:
# #   - Обработку данных, отчеты, повторяющиеся операции.
# #   - Улучшает производительность в бизнесе и жизни.
#
# # # Упражнения
# #
# # ## 1.5.1. Ответы на вопросы
# #
# # 1. **Какие предметные области входят в Data Science?**
# #    - В Data Science входят:
# #      - **Статистика**: Анализ и интерпретация данных.
# #      - **Машинное обучение**: Методы и алгоритмы прогнозирования.
# #      - **Программирование**: Автоматизация обработки данных.
# #      - **Бизнес-аналитика**: Извлечение инсайтов для решений.
# #      - **Большие данные**: Обработка больших объемов информации.
# #
# #    Общее — извлечение полезной информации из данных.
# #    Различия — в методах и инструментах каждой области.
# #
# # 2. **Как вы понимаете термин «алгоритм»?**
# #    - Алгоритм — последовательность шагов для решения задачи.
# #    - Может быть представлен текстом, псевдокодом или блок-схемой.
# #
# # 3. **Какую программу можно назвать хорошей?**
# #    - Характеристики хорошей программы:
# #      - Читаемость: понятный код
# #      - Эффективность: оптимальное использование ресурсов
# #      - Безопасность: защита от ошибок
# #      - Масштабируемость: работа с растущими данными
# #      - Поддерживаемость: легкость изменений
# #
# # 4. **Какой язык понимает компьютер?**
# #    - Компьютер понимает машинный язык (бинарный код).
# #    - Языки программирования переводятся в машинный код.
# #
# # 5. **Чем языки программирования отличаются от обычных языков?**
# #    - Языки программирования формализованы и однозначны.
# #    - Предназначены для точных инструкций компьютеру.
# #
# # ## 1.5.2. Правда или ложь
# #
# # 1. **ML - инструмент для извлечения знаний из данных.**
# #    **Ответ: Правда.**
# #
# # 2. **Глубокое обучение - то же, что машинное обучение.**
# #    **Ответ: Ложь.** (Глубокое обучение — подмножество ML)
# #
# # 3. **Все программисты - специалисты по данным.**
# #    **Ответ: Ложь.** (Требуются дополнительные навыки)
# #
# # 4. **Статистика важна для Data Science.**
# #    **Ответ: Правда.**
# #
# # 5. **Компьютер может выходить за рамки инструкций.**
# #    **Ответ: Ложь.** (Строго следует заданным инструкциям)
# #
# # 6. **Компьютеры понимают языки программирования напрямую.**
# #    **Ответ: Ложь.** (Требуется перевод в машинный код)
# #
# # 7. **Языки могут быть компилируемыми и интерпретируемыми.**
# #    **Ответ: Правда.**
# #
# # 8. **Все программы выполняются последовательно.**
# #    **Ответ: Ложь.** (Возможно параллельное выполнение)
# #
# # 9. **В IDE есть текстовый редактор.**
# #    **Ответ: Правда.**
# #
# # 10. **Компиляторы похожи на приводы CD.**
# #     **Ответ: Ложь.** (Это программы для обработки кода)
#
# # ## 1.5.3. Практические задания:

# +
# 1. **Алгоритм расчета простых процентов**

# Заданные значения
principal = 1000  # Начальная сумма
rate = 5  # Процентная ставка
time = 2  # Период времени в годах

# Расчет простых процентов
simple_interest = (principal * rate * time) / 100

print(f"Простые проценты: {simple_interest:.2f}")

# 2. **Алгоритм вычисления площади прямоугольника**

length = 5  # Длина
width = 3  # Ширина

area_rectangle = length * width
print(f"Площадь прямоугольника: {area_rectangle}")

# 3. **Алгоритм вычисления периметра круга**

radius_circle = 5
perimeter_circle = 2 * math.pi * radius_circle
print(f"Периметр круга: {round(perimeter_circle, 2)}")

# 4. **Поиск простых чисел до 100**

prime_numbers = []
for number in range(2, 100):
    is_prime = True
    for divisor in range(2, int(number**0.5) + 1):
        if number % divisor == 0:
            is_prime = False
            break
    if is_prime:
        prime_numbers.append(number)

print("Простые числа до 100:", prime_numbers)

# 5. **Преобразование регистра текста**

input_sentence = "ПРИМЕР С ТЕКСТОМ"
result_converted = input_sentence.lower().capitalize()
print("Результат:", result_converted)

# 7. **Сумма четных чисел до 100**

total_sum = 0
for i in range(2, 100, 2):
    total_sum += i

print("Сумма четных чисел до 100:", total_sum)

# 8. **Квадраты нечетных чисел от 1 до 15**

for i in range(1, 16):
    if i % 2 != 0:
        square = i * i
        print(f"Квадрат {i} равен {square}")

# 9. **Таблица умножения на 3**

for i in range(1, 11):
    result = 3 * i
    print(f"3 * {i} = {result}")
